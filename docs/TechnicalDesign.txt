** Action State Machine **

*** Concepts ***
- There are actions. There actions are unique.
- A charater can only be performing one action at a time (only can be in one state).
- An action has one or more animations that is played.
- In general, an "action state" or just "action" will execute until the end of the action's animation.
- Most actions will return to the "idle" state. Also called "neutral state".
- The idle states (like standing, crouching, jumping, etc) transtion into attacks and other actions
commanded by the player.


*** Input Handling ***
- Player input is polled at the start of our game tick.
- The change in input state needs to be stored somewhere which can be read byt the game simulation.
- We're going to store input once per game update (frame). This will let us replay inputs to produce
exactly the same result for testing/replays/network syncronization.


*** Character Controller ***
- The character will be controlled by a state machine with unique states for each action.
- State transitions will represent changes from one action to another.
- Player control (player input) will trigger state data transitions to the desired action.


*** Persistent Data Store ***
- Unmutable data
- Initialize at the start of the match
- Will not be stored for rollbacks
- Will not be updated by the game simulation
- Can be modified by the editor


*** Allocators ***
- Potentially use something in C++ similar to the following allocators in Zig if we know the max
memory used at compile time:
std.heap.FixedBufferAllocator or std.heap.ThreadSafeFixedBufferAllocator
- "GameSimulation::GameState gameState" in the main file should use an Arena Heap Allocator to be initialized


*** Character Data ***
- Max health
- Walk speed
- Backup speed
- Jump velocity
- Jump gravity


*** Action Properties ***
- Hitboxes
- Frame duration of an action
- Looping / not looping
- Looping sections / animation sections
- Hit properties
- Sound effects
- Animation
- Transitions


*** Hitboxes ***
- Group hitboxes together.
- These "groups" exist for a set amount of time during an action.
- Editable assets that can be referenced by action and a time within that action.
- At edit time think about hitboxes as (top, left, width, height). Might support more transformations in editor.
- Runtime data structure. For each hitbox 4 integers (top, left, bottom, right).
